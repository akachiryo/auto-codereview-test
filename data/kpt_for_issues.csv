title,body,labels,assignee,milestone,priority,difficulty
"KPT001: 実装が心配なタスクはドラフトPRをあげてこまめにレビューしてもらうようにする","# 概要

チーム開発において、実装に不安があるタスクについては早い段階でドラフトPRを作成し、こまめにレビューをもらうことで品質向上と学習効果を高める。

## 背景

- 実装に不安があるまま進めると、後で大きな修正が必要になる場合がある
- 早い段階でのレビューにより、より良いアプローチを学べる機会が増える
- チームメンバーの知見を活用することで、全体的な技術力向上につながる

## 期待される効果

- コードの品質向上
- 実装スピードの向上（手戻りの削減）
- チーム全体の技術力向上
- コミュニケーションの活性化

## 実施方法

1. 実装に不安があるタスクを特定
2. 早い段階（実装開始時や方向性が見えた時点）でドラフトPRを作成
3. レビュー依頼をチームメンバーに行う
4. フィードバックを受けて改善を継続

# 完了条件

- チーム内でこのルールが共有され、実践されること","kpt,retrospective,keep",,,medium,
"KPT002: レビュー後回しになってしまった","# 概要

レビュー依頼を受けた際に、自分のタスクを優先してしまい、レビューが後回しになってしまう問題について振り返る。

## 問題の詳細

- 自分のタスクに集中していると、レビュー依頼に気づかない場合がある
- 自分のタスクの進捗を優先してしまい、レビューを後回しにしてしまう
- 結果として、レビューを依頼した人の作業が止まってしまう

## 影響

- チーム全体の生産性低下
- レビューを依頼した人のモチベーション低下
- 品質向上の機会を逃してしまう
- チーム連携の悪化

## 改善案

1. レビュー依頼の通知設定を確認・改善
2. 定期的にレビュー待ちのPRをチェックする習慣をつける
3. レビューの優先度を明確にする
4. レビュー対応時間をタスクスケジュールに組み込む

# 完了条件

- 問題の原因と改善案がチーム内で共有され、対策が実施されること","kpt,retrospective,problem",,,medium,
"KPT003: 自分のタスクが終わっていなくても、レビューを優先にする","# 概要

チーム開発において、自分のタスクの進捗に関係なく、レビュー依頼があった場合は優先的に対応するルールを確立する。

## 背景

- チーム全体の生産性を最大化するため
- レビューの遅延による作業停滞を防ぐため
- 品質の高いコードを早期に確立するため

## ルールの詳細

1. **レビュー依頼の優先度**
   - 緊急度：高
   - 自分のタスクより優先して対応する

2. **対応時間の目安**
   - レビュー依頼を受けてから2時間以内に初回レスポンス
   - 簡単なレビューは即座に、複雑なものは24時間以内に完了

3. **例外事項**
   - 自分が緊急タスクに取り組んでいる場合
   - その場合も、いつまでにレビューできるかを明確に伝える

## 期待される効果

- チーム全体の開発スピード向上
- 品質の高いコードの早期確立
- チームワークの向上
- 相互学習の促進

## 実施方法

1. レビュー依頼の通知を見逃さない仕組みづくり
2. 作業の切り替えを前提としたタスク管理
3. レビュー対応時間の確保

# 完了条件

- このルールがチーム内で合意され、実践されること","kpt,retrospective,try",,,medium,