name: 🚀 Team Development Setup v4.0 (PARALLEL OPTIMIZED)

on:
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  discussions: write
  pages: write
  id-token: write

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🔍 Environment Diagnostics
      run: |
        echo "=========================================================="
        echo "🚀 TEAM SETUP WORKFLOW v3.0 (CONSOLIDATED) STARTING"
        echo "=========================================================="
        echo "⏰ Timestamp: $(date)"
        echo "🔧 Workflow: team-setup.yml v3.0"
        echo "📂 Working Directory: $(pwd)"
        echo "👤 Actor: ${{ github.actor }}"
        echo "📦 Repository: ${{ github.repository }}"
        echo "🌿 Ref: ${{ github.ref }}"
        echo "💻 Runner OS: ${{ runner.os }}"
        echo "=========================================================="
        
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install requests pandas
        
    - name: 🔍 Pre-Setup Verification
      env:
        TEAM_SETUP_TOKEN: ${{ secrets.TEAM_SETUP_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        echo "🔍 Running environment verification..."
        python scripts/verify_environment.py
        
    # ===============================
    # Step 1: Create GitHub Projects
    # ===============================
    - name: 📊 Create GitHub Projects V2
      env:
        TEAM_SETUP_TOKEN: ${{ secrets.TEAM_SETUP_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        echo "📊 Step 1: Creating 3 GitHub Projects (v3.0)..."
        python scripts/create_projects.py
        echo "✅ Projects created successfully"
        echo "📝 Checking project_ids.txt..."
        if [ -f "project_ids.txt" ]; then
          echo "Found project IDs:"
          cat project_ids.txt
        else
          echo "⚠️ project_ids.txt not found"
        fi
        
    - name: Upload project IDs and status
      uses: actions/upload-artifact@v4
      with:
        name: project-ids
        path: |
          project_ids.txt
          project_status.txt
        retention-days: 1
        
    # ===============================
    # Step 2: Setup Discussions
    # ===============================
    - name: 💬 Setup GitHub Discussions
      env:
        TEAM_SETUP_TOKEN: ${{ secrets.TEAM_SETUP_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        echo "💬 Step 2: Setting up Discussions (v3.0)..."
        python scripts/setup_discussions.py
        echo "✅ Discussions setup complete"
        
    # ===============================
    # Step 3: Setup Wiki
    # ===============================
    - name: 📚 Setup GitHub Wiki
      env:
        TEAM_SETUP_TOKEN: ${{ secrets.TEAM_SETUP_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        echo "📚 Step 3: Setting up Wiki..."
        
        # Generate wiki content
        python scripts/setup_wiki.py
        
        # Initialize wiki repository if needed
        if [ -d "wiki" ]; then
          echo "📝 Initializing Wiki repository..."
          
          # Create temporary directory for wiki operations
          WIKI_DIR="wiki_repository"
          rm -rf $WIKI_DIR
          mkdir -p $WIKI_DIR
          cd $WIKI_DIR
          
          # Initialize git
          git init
          git config user.email "action@github.com"
          git config user.name "GitHub Action"
          
          # Copy all wiki content
          cp -r ../wiki/* . 2>/dev/null || echo "No wiki files to copy"
          
          # Create initial commit
          git add .
          git commit -m "📚 Initialize Wiki with content" || echo "No changes to commit"
          
          # Push to wiki repository
          git remote add origin https://${{ secrets.TEAM_SETUP_TOKEN }}@github.com/${{ github.repository }}.wiki.git
          
          # Try to push (create if doesn't exist)
          git push --force --set-upstream origin master 2>/dev/null || \
          git push --force --set-upstream origin main 2>/dev/null || \
          echo "Wiki repository might already exist or need manual initialization"
          
          cd ..
          rm -rf $WIKI_DIR
        else
          echo "⚠️ Wiki content directory not found"
        fi
        
        echo "✅ Wiki setup complete"
        
    # ===============================
    # Step 4: Create Issues (Parallel Processing)
    # ===============================

  # 並列ジョブ1: タスクIssue作成
  create-task-issues:
    runs-on: ubuntu-latest
    needs: setup-environment
    if: success()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: pip install requests pandas
        
    - name: Download project status
      uses: actions/download-artifact@v4
      with:
        name: project-ids
        
    - name: 📋 Create Task Issues
      env:
        TEAM_SETUP_TOKEN: ${{ secrets.TEAM_SETUP_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        echo "📋 Creating Task Issues (Sequential Job 1/3)..."
        python scripts/create_task_issues.py
        echo "✅ Task issues creation completed!"
        
    - name: Upload task results
      uses: actions/upload-artifact@v4
      with:
        name: task-issues-result
        path: task_issues_result.txt
        retention-days: 1

  # 順次ジョブ2: テストIssue作成（順序保持）
  create-test-issues:
    runs-on: ubuntu-latest
    needs: create-task-issues  # タスク完了後に実行（Rate制限回避）
    if: success()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: pip install requests pandas
        
    - name: Download project status
      uses: actions/download-artifact@v4
      with:
        name: project-ids
        
    - name: 🧪 Create Test Issues
      env:
        TEAM_SETUP_TOKEN: ${{ secrets.TEAM_SETUP_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        echo "🧪 Creating Test Issues (Sequential Job 2/3, Order Preserved)..."
        python scripts/create_test_issues.py
        echo "✅ Test issues creation completed!"
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-issues-result
        path: test_issues_result.txt
        retention-days: 1

  # 順次ジョブ3: KPTIssue作成
  create-kpt-issues:
    runs-on: ubuntu-latest
    needs: create-test-issues  # テスト完了後に実行（Rate制限回避）
    if: success()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: pip install requests pandas
        
    - name: Download project status
      uses: actions/download-artifact@v4
      with:
        name: project-ids
        
    - name: 🎯 Create KPT Issues
      env:
        TEAM_SETUP_TOKEN: ${{ secrets.TEAM_SETUP_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        echo "🎯 Creating KPT Issues (Sequential Job 3/3)..."
        python scripts/create_kpt_issues.py
        echo "✅ KPT issues creation completed!"
        
    - name: Upload KPT results
      uses: actions/upload-artifact@v4
      with:
        name: kpt-issues-result
        path: kpt_issues_result.txt
        retention-days: 1

  # 統合ジョブ: プロジェクトリンク
  link-to-projects:
    runs-on: ubuntu-latest
    needs: [setup-environment, create-kpt-issues]  # KPT完了後に実行（簡略化）
    if: always() && needs.setup-environment.result == 'success'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: pip install requests pandas
        
    - name: Download project IDs
      uses: actions/download-artifact@v4
      with:
        name: project-ids
        
    - name: Download all issue results
      uses: actions/download-artifact@v4
      with:
        pattern: '*-issues-result'
        merge-multiple: true
        
    - name: 🔗 Link Issues to Projects
      env:
        TEAM_SETUP_TOKEN: ${{ secrets.TEAM_SETUP_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        echo "🔗 Linking all created issues to projects..."
        python scripts/link_all_to_projects.py
        echo "✅ Project linking completed!"
        
        
  # ===============================
  # Final Summary Job
  # ===============================
  final-summary:
    runs-on: ubuntu-latest
    needs: [setup-environment, create-task-issues, create-test-issues, create-kpt-issues, link-to-projects]
    if: always()
    
    steps:
    - name: Download all results
      uses: actions/download-artifact@v4
      with:
        pattern: '*-result'
        merge-multiple: true
        
    - name: 🎉 Display Final Summary
      run: |
        echo ""
        echo "🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉"
        echo "🎉                                        🎉"
        echo "🎉    チーム開発環境セットアップ完了！ v4.0   🎉"
        echo "🎉    Team Development Setup Complete! v4.0   🎉"
        echo "🎉           (PARALLEL OPTIMIZED)             🎉"
        echo "🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉"
        echo ""
        echo "🆕 VERSION: v4.0 (PARALLEL PROCESSING OPTIMIZED)"
        echo "✅ Successfully Created:"
        echo "• 📊 3 GitHub Projects V2"
        echo "• 📋 Task Issues (parallel job)"
        echo "• 🧪 Test Issues (sequential, order preserved)"
        echo "• 🎯 KPT Issues (parallel job)"
        echo "• 🔗 All issues linked to projects"
        echo "• 📚 Wiki pages with table design"
        echo "• 💬 Discussion template"
        echo ""
        
        echo "📊 Issue Creation Results:"
        if [ -f "task_issues_result.txt" ]; then
          echo "• $(head -1 task_issues_result.txt)"
        fi
        if [ -f "test_issues_result.txt" ]; then
          echo "• $(head -1 test_issues_result.txt)"
        fi
        if [ -f "kpt_issues_result.txt" ]; then
          echo "• $(head -1 kpt_issues_result.txt)"
        fi
        if [ -f "project_linking_result.txt" ]; then
          echo "• $(head -4 project_linking_result.txt | tail -1)"
        fi
        
        echo ""
        echo "🔗 Access your resources:"
        echo "• Projects: https://github.com/${{ github.repository }}/projects"
        echo "• Issues: https://github.com/${{ github.repository }}/issues"
        echo "• Wiki: https://github.com/${{ github.repository }}/wiki"
        echo "• Discussions: https://github.com/${{ github.repository }}/discussions"
        echo ""
        echo "🚀 Performance Improvements:"
        echo "• Parallel processing: Task, Test, KPT issues created simultaneously"
        echo "• Optimized API settings: 0.8s delay, 15 batch size, 8s batch pause"
        echo "• Target execution time: ~5 minutes (down from ~15 minutes)"
        echo "• Test order preservation: Maintained sequential execution for tests"